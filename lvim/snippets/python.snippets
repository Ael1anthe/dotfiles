snippet #!
	#!/usr/bin/env python3

snippet imp
	import ${0:module}

snippet from
	from ${1:package} import ${0:module}

snippet cl
	class ${1:ClassName}:
		"""${0:description}"""

snippet gcl
	class ${1:ClassName}(typing.Generic[${2:TypeVar}]):
		"""${0:description}"""
	
snippet cli
	class ${1:ClassName}:
		"""${2:description}"""

		def __init__(self, ${3:args}) -> None:
			self.$3 = $3
			${0}

snippet gcli
	class ${1:ClassName}(typing.Generic[${2:TypeVar}]):
		"""${3}"""

		def __init__(self, ${4:args}) -> None:
			self.$4 = $4
			${0}

snippet def
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}) -> ${3:ReturnType}:
		"""${4}"""
		${0}

snippet adef
	async def ${1:fname}(${2:`indent('.') ? 'self' : ''`}) -> ${3:ReturnType}:
		"""${4}"""
		${0}

snippet defi
	def __init__(self, ${1:args}) -> None:
		${0}

snippet defm
	def ${1:mname}(self, ${2:args}) -> ${3:ReturnType}:
		"""${4}"""
		${0}

snippet adefm
	async def ${1:mname}(self, ${2:args}) -> ${3:ReturnType}:
		"""${4}"""
		${0}

snippet cm
	@classmethod
	def ${1:mname}(cls, ${2:args}) -> ${3:ReturnType}:
		"""${4}"""
		${0}

snippet acm
	@classmethod
	async def ${1:mname}(cls, ${2:args}) -> ${3:ReturnType}:
		"""${4}"""
		${0}

snippet absm
	@abc.abstractmethod
	def ${1:mname}(self, ${2:args}) -> ${3:ReturnType}:
		"""${4}"""
		${0}

snippet aabsm
	@abc.abstractmethod
	async def ${1:mname}(self, ${2:args}) -> ${3:ReturnType}:
		"""${4}"""
		${0}
		
snippet prop property
	@property
	def ${1:foo}(self) -> ${2:type}
		"""${3:doc}"""
		return self._$1

	@$1.setter
	def $1(self, value: $2):
		self._$1 = value

snippet match Structural pattern matching
	match ${1:expression}:
		case ${2:pattern_1}:
			${3:pass}

snippet case
	case ${1:pattern}:
		${2:pass}
